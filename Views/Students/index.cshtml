@model IEnumerable<Students>
@{
    ViewData["Title"] = "Students";
}
<div class="container mt-4">
    <h1 class="text-center">Students</h1>
    <p class="text-center">Explore the wide range of students we have.</p>
    <a asp-controller="Students" asp-action="Create" class="btn btn-success mb-3">Add New Student</a>
    @Html.AntiForgeryToken()
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Address</th>
                <th>Phone</th>
                <th>Date of Birth</th>
                <th>Admission Date</th>
                <th>Admission Cost</th>
                <th>Courses</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Model)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.Name</td>
                    <td>@student.Email</td>
                    <td>@student.Address</td>
                    <td>@student.Phone</td>
                    <td>@student.DateOfBirth.ToShortDateString()</td>
                    <td>@student.AdmissionDate.ToShortDateString()</td>
                    <td>@student.AdmissionCost.ToString("C")</td>
                    <td>
                        @if (student.StudentCourses != null && student.StudentCourses.Any())
                        {
                            foreach (var course in student.StudentCourses)
                            {
                                <a asp-action="Details" asp-controller="Course" asp-route-id="@course.CourseId"
                                    class="btn btn-primary btn-sm me-1">
                                    @course.Course.Name
                                </a>
                            }
                        }
                        else
                        {
                            <span class="text-muted">No Courses</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-danger deleteStudent" data-bs-toggle="modal"
                            data-id="@student.Id" data-name="@student.Name">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
</div>
<script>
    // Function to get the anti-forgery token from the page
    function getAntiForgeryToken() {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenElement ? tokenElement.value : '';
    }
const deleteButtons = document.getElementsByClassName('deleteStudent');

if(deleteButtons.length > 0){
    Array.from(deleteButtons).forEach(button=>{
        button.addEventListener('click',function(){
            debugger;
            const studentId = this.getAttribute('data-id');
            const studentName = this.getAttribute('data-name');
            swal.fire({
                title: `Are you sure want to delete ${studentId}?`,
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result)=>{
                if (result.isConfirmed) {
                    // Perform the delete operation
                    $.ajax({
                        url: `/Students/Delete/${studentId}`,
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': getAntiForgeryToken(), // for ASP.NET Core CSRF protection
                            'Content-Type': 'application/json'
                        },
                        success: function (response) {
                            if (response.success) {
                                debugger;
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: `${studentName} has been deleted.`,
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                }).then(() => {
                                    location.reload(); 
                                });
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: `Failed to delete ${studentName}.`,
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                }).then(() => {
                                    location.reload(); 
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true,
                                icon: 'error',
                                title: 'Error!',
                                text: 'Failed to delete student.',
                            });
                        }
                    });
                }
            })
        })
    })
};
</script>
