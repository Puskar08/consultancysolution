@model IEnumerable<Students>
@{
    ViewData["Title"] = "Students";
}
<div class="page">
    <div class="page-header">
        <h1 class="text-center">Students</h1>
        <p class="text-center">Discover and manage students information.</p>
        <a asp-controller="Students" asp-action="Create" class="btn btn-success">Add Student</a>

    </div>
    <div class="page-body">

        <table>
            @Html.AntiForgeryToken()
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Address</th>
                    <th>Phone</th>
                    <th>Admission Date</th>
                    <th>Courses</th>
                    <th>Total Cost</th>
                    <th>Paid</th>
                    <th>Due</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in Model)
                {
                    var totalCost = student.AdmissionCost - student.Discount + (student.StudentCourses != null ?
                    student.StudentCourses.Sum(sc => sc.ModifiedCoursePrice) : 0);
                    var totalPaid = student.PaidAdmissionAmount + (student.StudentCourses != null ?
                    student.StudentCourses.Sum(sc => sc.PaidAmount) : 0);
                    var totalDue = (student.AdmissionCost - student.Discount - student.PaidAdmissionAmount) +
                    (student.StudentCourses?.Sum(sc => sc.ModifiedCoursePrice) ?? 0) - (student.StudentCourses?.Sum(sc =>
                    sc.PaidAmount) ?? 0);
                    <tr data-studentId="@student.Id">
                        <td><a asp-controller="Students" asp-action="Form" asp-route-mode="Edit"
                                asp-route-studentId="@student.Id" class="text-primary-emphasis text-decoration-none"
                                style="cursor: pointer;">
                                @student.Name
                            </a>
                        </td>
                        <td>@student.Email</td>
                        <td>@student.Address</td>
                        <td>@student.Phone</td>
                        <td>@student.AdmissionDate.ToShortDateString()</td>
                        @{
                            var badgeClasses = new[] { "secondary", "success", "primary", "info", "dark" };
                        }
                        <td>
                            @if (student.StudentCourses != null && student.StudentCourses.Any())
                            {
                                foreach (var course in student.StudentCourses)
                                {
                                    // Use course ID modulo badgeClasses length to pick color consistently
                                    var colorClass = badgeClasses[course.CourseId % badgeClasses.Length];
                                    <span class="badge bg-@colorClass">
                                        @course.Course.Name
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">No Courses</span>
                            }
                        </td>
                        <td>@totalCost.ToString("N2")</td>
                        <td>@totalPaid.ToString("N2")</td>
                        <td>@totalDue.ToString("N2")</td>
                        <td><button class="action-btn deleteStudent" data-id="@student.Id" data-name="@student.Name">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>
<script>
    // Function to get the anti-forgery token from the page
    function getAntiForgeryToken() {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenElement ? tokenElement.value : '';
    }
    const deleteButtons = document.getElementsByClassName('deleteStudent');

    if (deleteButtons.length > 0) {
        Array.from(deleteButtons).forEach(button => {
            button.addEventListener('click', function () {
                debugger;
                const studentId = this.getAttribute('data-id');
                const studentName = this.getAttribute('data-name');
                swal.fire({
                    title: `Are you sure want to delete ${studentName}?`,
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Perform the delete operation
                        $.ajax({
                            url: `/Students/Delete/${studentId}`,
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': getAntiForgeryToken(), // for ASP.NET Core CSRF protection
                                'Content-Type': 'application/json'
                            },
                            success: function (response) {
                                if (response.success) {
                                    debugger;
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: `${studentName} has been deleted.`,
                                        showConfirmButton: false,
                                        timer: 1000,
                                        timerProgressBar: true
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: `Failed to delete ${studentName}.`,
                                        showConfirmButton: false,
                                        timer: 2000,
                                        timerProgressBar: true
                                    }).then(() => {
                                        location.reload();
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true,
                                    icon: 'error',
                                    title: 'Error!',
                                    text: 'Failed to delete student.',
                                });
                            }
                        });
                    }
                })
            })
        })
    };
</script>
