@model List<consultancysolution.Models.SelectedCourseDto>
@{
    var courses = ViewBag.Courses as List<consultancysolution.Models.Course>;
    var disableAttr = (ViewBag.CourseSelectionMode == "Add") ? "" : "disabled";
}
<div id="course-selection" class="tab-pane">
    <div class="form-group">
        <label>Select Courses:</label>
        <select id="courseDropdown" class="form-control">
            <option value="">-- Select Course --</option>
            @if (courses != null)
            {
                foreach (var course in courses)
                {
                    <option value="@course.Id" data-name="@course.Name" data-price="@course.Price">
                        @course.Name (@course.Price)
                    </option>
                }
            }
        </select>
    </div>

    </br>
    <table>
        <thead>
            <tr>
                <th>Course</th>
                <th>Course Fee</th>
                <th>Discount</th>
                <th>Modified Fee</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="selectedCourses">
            @foreach (var item in Model)
            {
                <tr data-id="@item.Id">
                    <td>@item.CourseName<input type="hidden" name="Courses[@item.Id].Name" value="@item.CourseName" /></td>
                    <td>@item.Price<input type="hidden" name="Courses[@item.Id].Price" value="@item.Price" /></td>
                    <td><input type="number" name="Courses[@item.Id].Discount" class="form-control discount"
                            value="@item.Discount" @disableAttr /></td>
                    <td class="modifiedFee">@item.ModifiedCoursePrice </td>
                    <td><button type="button" class="action-btn delete-row">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="col-sm-12 d-flex justify-content-end gap-2">
        @{
            if (ViewBag.courseSelectionMode == "Edit")
            {
                <button id="editCourses" class="btn btn-warning">Edit</button>
                <button id="updateCourses" class="btn btn-success" style="display:none;" data-buttonType="edit">Update</button>
                <button id="cancelCourseSelection" class="btn btn-secondary" style="display:none;">Cancel</button>
            }
            else
            {
                <button id="saveCourses" class="btn btn-primary" data-buttonType="add">Save</button>
            }
            <button type="button" class="closeBtn btn btn-secondary"
                onclick="window.location.href='/Students/Index';">Close</button>
        }
    </div>
</div>

<script>
    $(document).ready(function () {

        let addedCourses = new Set();
        //on doropdown change
        $('#courseDropdown').on('change', function () {
            debugger;
            const selectedOption = $(this).find('option:selected');
            const courseId = selectedOption.val();
            const courseName = selectedOption.data('name');
            const coursePrice = parseFloat(selectedOption.data('price'));

            if (!courseId || addedCourses.has(courseId)) return;

            const newRow = `
                    <tr data-id="${courseId}">
                        <td>${courseName}<input type="hidden" name="Courses[${courseId}].Id" value="${courseId}" /></td>
                        <td>${coursePrice}<input type="hidden" name="Courses[${courseId}].Price" value="${coursePrice}" /></td>
                        <td>
                            <input type="number" name="Courses[${courseId}].Discount" class="form-control discount" value="0" min="0" />
                        </td>
                        <td class="modifiedFee">${coursePrice}</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm delete-row">
                                <i class="fa-solid fa-xmark"></i>
                            </button>
                        </td>
                    </tr>
                `;
            $('#selectedCourses').append(newRow);
            addedCourses.add(courseId);
            $(this).val('');
        });

        // Update Modified Fee on discount input
        $('#selectedCourses').on('input', '.discount', function () {
            debugger;
            const row = $(this).closest('tr');
            const price = parseFloat(row.find('input[name$=".Price"]').val());
            const discount = parseFloat($(this).val()) || 0;
            const modified = Math.max(0, price - discount);
            row.find('.modifiedFee').text(modified.toFixed(2));
        });

        // Delete course row
        $('#selectedCourses').on('click', '.delete-row', function () {
            const row = $(this).closest('tr');
            const courseId = row.data('id');
            row.remove();
            addedCourses.delete(String(courseId));
        });
    });
    // Save courses
    function saveCourses(buttonType) {
        debugger;
        const studentId = $('#StudentID').val();
        const data = [];

        $('#selectedCourses tr').each(function () {
            const row = $(this);
            data.push({
                Id: row.data('id'), // This is CourseId
                Price: parseFloat(row.find('input[name$=".Price"]').val()),
                Discount: parseFloat(row.find('input[name$=".Discount"]').val()) || 0
            });
        });

        $.ajax({
            url: `/Students/SaveCourses?studentId=${studentId}`, // <- Pass as query param
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data), // <- Just the array body
            success: function (response) {
                if (response.success) {
                    $('#tab-content').html(response.html);
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false,
                        icon: 'success',
                        title: 'Success',
                        text: response.message || 'Courses saved successfully.'
                    });
                    debugger;
                    var courseSelectionMode = '@ViewBag.CourseSelectionMode';
                    if (courseSelectionMode == "Add") {
                        $('[data-tab="account"]').click(); // Automatically navigate to the next tab
                    }
                } else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false,
                        icon: 'error',
                        title: 'Error',
                        text: response.message || 'Failed to save courses.'
                    });
                }
            },
            error: function () {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    timer: 2000,
                    timerProgressBar: true,
                    showConfirmButton: false,
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while saving courses.'
                });
            }
        });
    }
    $('#saveCourses ,#updateCourses').on('click', function () {
        saveCourses(this.dataset.buttonType);
    });
    // Edit courses
    $('#editCourses').on('click', function () {
        $('#selectedCourses .discount').prop('disabled', false);
        $('#updateCourses, #cancelCourseSelection').show();
        $(this).hide();
    });
    // Cancel course selection
    $('#cancelCourseSelection').on('click', function () {
        $('[data-tab="course-selection"]').click();
    });

</script>
